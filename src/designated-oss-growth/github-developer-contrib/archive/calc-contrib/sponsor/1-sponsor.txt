# sponsorによる貢献度を算出する
jq \
  --arg task_name "sponsor" \
  --slurpfile weighting "./src/designated-oss-growth/github-developer-contrib/archive/calc-contrib/weighting.json" \
  '
    # repository作成前のsponsorはmaxより評価するために、 $daysはマイナスでも0に直さない
    def clamp($max; $unit; $days):
      ($max - ($unit * $days)) as $v | if $v <= 0 then 1 else $v end;

    def build_row_fields($repo_ts; $w):
      (.task_date | fromdateiso8601) as $task_ts
      | (((($task_ts // 0) - ($repo_ts // 0)) / 86400) | floor) as $days
      | ($w[$task_name].task_type // 0) as $tw
      | (clamp(
          $w[$task_name].repo_creation_to_task_period.max_period;
          $w[$task_name].repo_creation_to_task_period.minus_unit;
          $days
        )) as $cre_p
      | {
          "criterion_weight_for_task_type": $tw,
          "criterion_weight_for_repo_creation_to_task_period": $cre_p,
          "contribution_point": ($tw * $cre_p)
        };

    $weighting[0] as $w
    | . as $root
    | ($root.meta.repository.created_at | fromdateiso8601) as $repo_ts

    # ユーザー配列を安全に更新（常に全体を返す）
    | .data.user = ((.data.user // []) | map(
        . as $u
        | ($u.task // []) as $tasks
        | $u + { task: ($tasks | map(
            if .task_name == $task_name then
              . + build_row_fields($repo_ts; $w)
            else .
            end
          )) }
      ))
  ' \
  "./src/designated-oss-growth/github-developer-contrib/archive/calc-contrib/integrated-processed-data.json" \
  > "./src/designated-oss-growth/github-developer-contrib/archive/calc-contrib/sponsor/1-1-result.json"
