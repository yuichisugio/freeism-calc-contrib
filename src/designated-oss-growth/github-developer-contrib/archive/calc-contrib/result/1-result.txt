'
  # 最大値から、期間が過ぎた機関だけ引き算した重み付け値を返す
    def clamp($max; $max_weight ;$unit; $days; $lower_limit):
        (($max - $unit * $days) * $max_weight) as $v
        | if $v < $lower_limit then $lower_limit else $v end;

    # 値×重み → 下限補正
    def metric_weight($src; $weight; $min):
      (($src // 0) * ($weight // 0)) as $raw
      | (if $raw < ($min // 0) then ($min // 0) else $raw end);

    # 重み付け値をオブジェクトとして構築して返す
    def build_row_fields($repo_ts; $w):
      . as $t

    # タスク日時を取得
    | (
        $t.task_date | fromdateiso8601
      ) as $epoch_task_date

    # タスクタイプの重み付け値を取得
    | (
        $w[$task_name].task_type // 0
      ) as $tt

    # リポジトリ作成からタスクまでの期間の重み付け値を取得
    | (
        (((($epoch_task_date // 0) - ($repo_ts // 0)) / 86400) | floor) as $rcttp_days
        | clamp(
            $w[$task_name].repo_creation_to_task_period.max_period;
            $w[$task_name].repo_creation_to_task_period.max_weight;
            $w[$task_name].repo_creation_to_task_period.minus_unit;
            $rcttp_days;
            $w[$task_name].repo_creation_to_task_period.lower_limit
          )
      ) as $rcttp

    # 作業量の重み付け値を取得
    | (
        metric_weight(
          $t.letter_count;
          $w[$task_name].amount_of_work.letter_count;
          $w[$task_name].amount_of_work.letter_count_lower_limit
        ) as $aow_word
      | metric_weight(
          $t.lines_of_code;
          $w[$task_name].amount_of_work.lines_of_code;
          $w[$task_name].amount_of_work.lines_of_code_lower_limit
        ) as $aow_code
      | ( $aow_word + $aow_code )
      ) as $aow

    # リアクションの重み付け値を取得
    | (
        metric_weight(
          $t.good_reaction;
          $w[$task_name].amount_of_reaction.good_reaction_count;
          $w[$task_name].amount_of_reaction.good_reaction_count_lower_limit
        ) as $good_reaction_weigting
        | (
            $t.bad_reaction
            * $w[$task_name].amount_of_reaction.bad_reaction_count
          ) as $bad_reaction_weigting
        | ($good_reaction_weigting + $bad_reaction_weigting)
      ) as $aor

    # レスポンススピードの重み付け値を取得
    | (
        ($t.task_start | fromdateiso8601) as $epoch_task_start
        | (((($epoch_task_date // 0) - ($epoch_task_start // 0)) / 86400) | floor) as $rs_days
        | clamp(
            $w[$task_name].response_speed.max_period;
            $w[$task_name].response_speed.max_weight;
            $w[$task_name].response_speed.minus_unit;
            $rs_days;
            $w[$task_name].response_speed.lower_limit
          )
      ) as $rs

    # ステータスの重み付け値を取得
    | (
        $w[$task_name].state[$t.state]
      ) as $state

    # 重み付け値をオブジェクトとして構築して返す
    | {
        "criterion_weight_for_task_type":                     $tt,
        "criterion_weight_for_repo_creation_to_task_period":  $rcttp,
        "criterion_weight_for_amount_of_work":                $aow,
        "criterion_weight_for_amount_of_reaction":            $aor,
        "criterion_weight_for_status":                        $state,
        "criterion_weight_for_response_speed":                $rs,
        "contribution_point": (($tt * $rcttp * $aow * $aor * $state * $rs) | round)
      };

  # __RESPONSE_SPEED__
  # __AMOUNT_OF_WORK__
  # __AMOUNT_OF_REACTION__
  # __STATUS__
  # __REPO_CREATION_TO_TASK_PERIOD__
  # __FIRST_OTHER_QUERY__
  # __SECOND_OTHER_QUERY__

  # 重み付け値を記載したjsonを読み込む
  $weighting[0] as $w
  | . as $root
  | ($root.meta.repository.created_at | fromdateiso8601) as $repo_ts

  # ユーザー配列を安全に更新（常に全体を返す）
  | .data.user = ((.data.user // []) | map(
      . as $u
      | ($u.task // []) as $tasks
      | $u + {
          task: ($tasks | map(
            if .task_name == $task_name then
              . + build_row_fields($repo_ts; $w)
            else .
            end
          ))
        }
    ))
'
