# repositoryクエリ：Discussion & node_idの取得
gh api graphql \
  --paginate \
  --slurp \
  --header X-Github-Next-Global-ID:1 \
  -f owner="yuichisugio" \
  -f name="myFirstTest" \
  -F perPage=50 \
  -f query='
    query(
      $owner: String!,
      $name: String!,
      $perPage: Int!,
      $endCursor: String
    ) {
      repository(owner:$owner, name:$name) {
        id
        databaseId
        createdAt
        name
        description
        homepageUrl
        url
        hasDiscussionsEnabled
        discussionCategories(first: 10) {
          totalCount
          pageInfo { hasNextPage endCursor }
          nodes {
            id
            name
            description
            slug
            createdAt
            updatedAt
          }
        }
        discussions(first: $perPage, after: $endCursor, orderBy:{field: CREATED_AT, direction: ASC } ) {
          totalCount
          pageInfo { hasNextPage endCursor }
          nodes {
            id
            databaseId
            number
            url
            title
            bodyText
            publishedAt
            reactionGroups { content reactors { totalCount } }
            reactions(first: 1){
              totalCount
            }
            category{
              id
              name
              description
              slug
              createdAt
              isAnswerable
              emoji
            }
            author{
              __typename
              ... on Bot { databaseId id login url }
              ... on EnterpriseUserAccount { id login name url }
              ... on Mannequin { databaseId id login name url }
              ... on Organization { databaseId id login name url }
              ... on User { databaseId id login name url }
            }
            closedAt
            comments(first: 1){
              totalCount
            }
            poll{
              id
              question
              totalVoteCount
              options(first: 20){
                totalCount
                pageInfo { hasNextPage endCursor }
                nodes {
                  id
                  option
                  totalVoteCount
                }
              }
            }
            answerChosenBy{
              __typename
              ... on Bot { databaseId id login url }
              ... on EnterpriseUserAccount { id login name url }
              ... on Mannequin { databaseId id login name url }
              ... on Organization { databaseId id login name url }
              ... on User { databaseId id login name url }
            }
            answerChosenAt
            answer{
              databaseId
              id
              url
              upvoteCount
              author {
                __typename
                ... on Bot { databaseId id login url }
                ... on EnterpriseUserAccount { id login name url }
                ... on Mannequin { databaseId id login name url }
                ... on Organization { databaseId id login name url }
                ... on User { databaseId id login name url }
              }
              bodyText
              publishedAt
              createdAt
              deletedAt
              reactionGroups { content reactors { totalCount } }
              reactions(first: 1){
                totalCount
              }
              replies(first: 1){
                totalCount
              }
            }
          }
        }
      }
    }
  ' | jq '.'> ./src/designated-oss-growth/github-developer-contrib/archive/get-data/discussion/1-1-discussion.json


# nodeクエリ：Discussion.reactionsの取得
gh api graphql \
  --paginate \
  --slurp \
  --header X-Github-Next-Global-ID:1 \
  -f node_id="D_kwDOMAoJw84AhuHS" \
  -F perPage=50 \
  -f query='
    query($node_id: ID!, $perPage: Int!, $endCursor: String) {
      node(id: $node_id) {
        __typename
        ... on Discussion {
          id
          databaseId
          number
          url
          title
          bodyText
          publishedAt
          reactions(first: $perPage, after:$endCursor){
            totalCount
            pageInfo { hasNextPage endCursor }
            nodes {
              databaseId
              id
              content
              createdAt
              user { databaseId id login name url }
            }
          }
        }
      }
    }
  ' | jq '.' >"./src/designated-oss-growth/github-developer-contrib/archive/get-data/discussion/1-2-discussion.json"


# nodeクエリ：Discussion.commentsの取得
gh api graphql \
  --paginate \
  --slurp \
  --header X-Github-Next-Global-ID:1 \
  -f node_id="D_kwDOMAoJw84AhuHS" \
  -F perPage=50 \
  -f query='
    query($node_id: ID!, $perPage: Int!, $endCursor: String) {
      node(id: $node_id) {
        __typename
        ... on Discussion {
          id
          databaseId
          number
          url
          title
          bodyText
          publishedAt
          comments(first: $perPage, after:$endCursor){
            totalCount
            pageInfo { hasNextPage endCursor }
            nodes {
              databaseId
              id
              url
              upvoteCount
              author {
                __typename
                ... on User { databaseId id login name url }
                ... on Bot { databaseId id login url }
                ... on Mannequin { databaseId id login name url }
                ... on Organization { databaseId id login name url }
                ... on EnterpriseUserAccount { user { databaseId id login name url } }
              }
              bodyText
              publishedAt
              reactionGroups { content reactors { totalCount } }
              reactions(first: 1){
                totalCount
              }
              replies(first: 1){
                totalCount
              }
            }
          }
        }
      }
    }
  ' | jq '.' >"./src/designated-oss-growth/github-developer-contrib/archive/get-data/discussion/1-3-discussion.json"


# nodeクエリ：Discussion.comments.reactionsの取得
gh api graphql \
  --paginate \
  --slurp \
  --header X-Github-Next-Global-ID:1 \
  -f node_id="DC_kwDOMAoJw84A3CHQ" \
  -F perPage=50 \
  -f query='
    query($node_id: ID!, $perPage: Int!, $endCursor: String) {
      node(id: $node_id) {
        __typename
        ... on DiscussionComment {
          id
          url
          reactions(first: $perPage, after: $endCursor){
            totalCount
            pageInfo { hasNextPage endCursor }
            nodes{ 
              databaseId
              id
              content
              createdAt
              user { databaseId id login name url }
            }
          }
        }
      }
    }
  ' | jq '.' >"./src/designated-oss-growth/github-developer-contrib/archive/get-data/discussion/1-4-discussion.json"


# nodeクエリ：Discussion.comments.repliesの取得
gh api graphql \
  --paginate \
  --slurp \
  --header X-Github-Next-Global-ID:1 \
  -f node_id="DC_kwDOMAoJw84A3CHQ" \
  -F perPage=50 \
  -f query='
    query($node_id: ID!, $perPage: Int!, $endCursor: String) {
      node(id: $node_id) {
        __typename
        ... on DiscussionComment {
          id
          url
          replies(first: $perPage, after: $endCursor){
            totalCount
            pageInfo { hasNextPage endCursor }
            nodes {
              databaseId
              id
              url
              upvoteCount
              author {
                __typename
                ... on User { databaseId id login name url }
                ... on Bot { databaseId id login url }
                ... on Mannequin { databaseId id login name url }
                ... on Organization { databaseId id login name url }
                ... on EnterpriseUserAccount { user { databaseId id login name url } }
              }
              bodyText
              publishedAt
              reactionGroups { content reactors { totalCount } }
              reactions(first: 1){
                totalCount
              }
            }
          }
        }
      }
    }
  ' | jq '.' >"./src/designated-oss-growth/github-developer-contrib/archive/get-data/discussion/1-5-discussion.json"


# nodeクエリ：Discussion.comments.replies.reactionsの取得
gh api graphql \
  --paginate \
  --slurp \
  --header X-Github-Next-Global-ID:1 \
  -f node_id="DC_kwDOMAoJw84A3CHT" \
  -F perPage=50 \
  -f query='
    query($node_id: ID!, $perPage: Int!, $endCursor: String) {
      node(id: $node_id) {
        __typename
        ... on DiscussionComment {
          id
          url
          reactions(first: $perPage, after: $endCursor){
            totalCount
            pageInfo { hasNextPage endCursor }
            nodes{ 
              databaseId
              id
              content
              createdAt
              user { databaseId id login name url }
            }
          }
        }
      }
    }
  ' | jq '.' >"./src/designated-oss-growth/github-developer-contrib/archive/get-data/discussion/1-6-discussion.json"


# nodeクエリ：Discussion.answer.reactionsの取得
gh api graphql \
  --paginate \
  --slurp \
  --header X-Github-Next-Global-ID:1 \
  -f node_id="DC_kwDOMAoJw84A3CHT" \
  -F perPage=50 \
  -f query='
    query($node_id: ID!, $perPage: Int!, $endCursor: String) {
      node(id: $node_id) {
        __typename
        ... on DiscussionComment {
          id
          url
          reactions(first: $perPage, after: $endCursor){
            totalCount
            pageInfo { hasNextPage endCursor }
            nodes{ 
              databaseId
              id
              content
              createdAt
              user { databaseId id login name url }
            }
          }
        }
      }
    }
  ' | jq '.' >"./src/designated-oss-growth/github-developer-contrib/archive/get-data/discussion/1-7-discussion.json"


# nodeクエリ：Discussion.answer.repliesの取得
gh api graphql \
  --paginate \
  --slurp \
  --header X-Github-Next-Global-ID:1 \
  -f node_id="DC_kwDOMAoJw84A3CHQ" \
  -F perPage=50 \
  -f query='
    query($node_id: ID!, $perPage: Int!, $endCursor: String) {
      node(id: $node_id) {
        __typename
        ... on DiscussionComment {
          id
          url
          replies(first: $perPage, after: $endCursor){
            totalCount
            pageInfo { hasNextPage endCursor }
            nodes {
              databaseId
              id
              url
              upvoteCount
              author {
                __typename
                ... on User { databaseId id login name url }
                ... on Bot { databaseId id login url }
                ... on Mannequin { databaseId id login name url }
                ... on Organization { databaseId id login name url }
                ... on EnterpriseUserAccount { user { databaseId id login name url } }
              }
              bodyText
              publishedAt
              reactionGroups { content reactors { totalCount } }
              reactions(first: 1){
                totalCount
              }
            }
          }
        }
      }
    }
  ' | jq '.' >"./src/designated-oss-growth/github-developer-contrib/archive/get-data/discussion/1-8-discussion.json"


# nodeクエリ：Discussion.answer.replies.reactionsの取得
gh api graphql \
  --paginate \
  --slurp \
  --header X-Github-Next-Global-ID:1 \
  -f node_id="DC_kwDOMAoJw84A3CHT" \
  -F perPage=50 \
  -f query='
    query($node_id: ID!, $perPage: Int!, $endCursor: String) {
      node(id: $node_id) {
        __typename
        ... on DiscussionComment {
          id
          url
          reactions(first: $perPage, after: $endCursor){
            totalCount
            pageInfo { hasNextPage endCursor }
            nodes{ 
              databaseId
              id
              content
              createdAt
              user { databaseId id login name url }
            }
          }
        }
      }
    }
  ' | jq '.' >"./src/designated-oss-growth/github-developer-contrib/archive/get-data/discussion/1-9-discussion.json"
