# テスト的に全データを取得してみる
gh api graphql \
  --paginate \
  --slurp \
  --header X-Github-Next-Global-ID:1 \
  -f owner="yuichisugio" \
  -f name="myFirstTest" \
  -F perPage=50 \
  -f query='
    query(
      $owner: String!,
      $name: String!,
      $perPage: Int!,
      $endCursor: String
    ) {
      repository(owner:$owner, name:$name) {
        id
        databaseId
        createdAt
        name
        description
        homepageUrl
        url
        hasDiscussionsEnabled
        discussionCategories(first: 10) {
          totalCount
          pageInfo { hasNextPage endCursor }
          nodes {
            id
            name
            description
            slug
            createdAt
            updatedAt
          }
        }
        discussions(first: $perPage, after: $endCursor, orderBy:{field: CREATED_AT, direction: ASC } ) {
          totalCount
          pageInfo { hasNextPage endCursor }
          nodes {
            id
            databaseId
            number
            url
            title
            bodyText
            createdAt
            publishedAt
            reactionGroups { content reactors { totalCount } }
            reactions(first: 10){
              totalCount
              pageInfo { hasNextPage endCursor }
              nodes {
                databaseId
                id
                content
                createdAt
                user { databaseId id login name url }
              }
            }
            category{
              id
              name
              description
              slug
              createdAt
              isAnswerable
              emoji
            }
            author{
              __typename
              ... on Bot { databaseId id login url }
              ... on EnterpriseUserAccount { id login name url }
              ... on Mannequin { databaseId id login name url }
              ... on Organization { databaseId id login name url }
              ... on User { databaseId id login name url }
            }
            closedAt
            comments(first: 10){
              totalCount
              pageInfo { hasNextPage endCursor }
              nodes {
                author{
                  __typename
                  ... on Bot { databaseId id login url }
                  ... on EnterpriseUserAccount { id login name url }
                  ... on Mannequin { databaseId id login name url }
                  ... on Organization { databaseId id login name url }
                  ... on User { databaseId id login name url }
                }
                bodyText
                createdAt
                databaseId
                deletedAt
                id
                isAnswer
                publishedAt
                reactionGroups { content reactors { totalCount } }
                reactions(first: 1){
                  totalCount
                }
                url
                upvoteCount
                replies(first: 5){
                  totalCount
                  pageInfo { hasNextPage endCursor }
                  nodes {
                    bodyText
                  }
                }
              }
            }
            labels(first: 10){
              totalCount
              pageInfo { hasNextPage endCursor }
              nodes { 
                id
                url
                name
                description
              }
            }
            poll{
              id
              question
              totalVoteCount
              options(first: 20){
                totalCount
                pageInfo { hasNextPage endCursor }
                nodes {
                  id
                  option
                  totalVoteCount
                }
              }
            }
            answerChosenBy{
              __typename
              ... on Bot { databaseId id login url }
              ... on EnterpriseUserAccount { id login name url }
              ... on Mannequin { databaseId id login name url }
              ... on Organization { databaseId id login name url }
              ... on User { databaseId id login name url }
            }
            answerChosenAt
            answer{
              databaseId
              id
              url
              upvoteCount
              author {
                __typename
                ... on Bot { databaseId id login url }
                ... on EnterpriseUserAccount { id login name url }
                ... on Mannequin { databaseId id login name url }
                ... on Organization { databaseId id login name url }
                ... on User { databaseId id login name url }
              }
              bodyText
              publishedAt
              createdAt
              deletedAt
              reactionGroups { content reactors { totalCount } }
              reactions(first: 1){
                totalCount
              }
              replies(first: 1){
                totalCount
              }
            }
          }
        }
      }
    }
  ' | jq '.'> ./src/designated-oss-growth/github-developer-contrib/archive/get-data/discussion/2-1-discussion.json
